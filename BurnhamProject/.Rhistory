Origin <- c(rep("local", 100),
rep("California", 100))
FlowerType <- rep(c(rep("clover",25),
rep("goldenrod",25),
rep("treefoil",25),
rep("mixed",25)),2)
Mass <- c(rnorm(n = 100,
mean=32,
sd = 8), rnorm(n = 100,
mean=21,
sd=4))
NosemaLoad <-c(rnorm(n = 100,
mean=100000,
sd = 80000), rnorm(n = 100,
mean=500000,
sd=40000))
VarroaLoad <- c(rnorm(n = 100,
mean=5,
sd = 2), rnorm(n = 100,
mean=9,
sd=3))
Time <- rep(c(rep("Time1", 50), rep("Time2", 50)),2)
DF <- data.frame(ID, Origin, FlowerType, Mass, NosemaLoad, VarroaLoad, Time)
plot6 <- ggplot(DF, aes(Mass, fill=Origin))
plot6 + geom_histogram(alpha=0.2) + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin, alpha=0.2))
plot6 + geom_histogram() + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass))
plot6 + geom_histogram(fill=Origin, alpha=0.2) + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass))
plot6 + geom_histogram(data=subset(DF, Origin == "Local"), fill = "slategray3", alpha = 0.4) + geom_histogram(data=subset(DF, Origin == "California"), fill = "dodgerblue4", alpha = 0.4) + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass)) + geom_histogram(data=subset(DF, Origin == "Local"), fill = "slategray3", alpha = 0.4) + geom_histogram(data=subset(DF, Origin == "California"), fill = "dodgerblue4", alpha = 0.4)
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
subset(DF, Origin == "California")
plot6 <- ggplot(DF, aes(Mass, fill=Origin, alpha=0.2))
plot6 + geom_histogram() + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin))
plot6 + geom_histogram(alpha=0.2, position="identity") + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin))
+ geom_histogram(alpha=0.2, position="identity")
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.8, position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity") +
stat_bin(bins = 30)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity") +
stat_bin(bins = 30)
plot6
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2)
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
plot6 <- ggplot(DF, aes(Mass, fill=Origin)) +
geom_histogram(alpha=0.2, aes(y = ..density..), position="identity")
plot6 + stat_bin(bins = 30) + theme_minimal(base_size = 17) + scale_fill_manual(values=colors)
Concentration <- c(rep("20%", 10), rep("10%", 10))
Concentration
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
Refractometer
data <- data.frame(Refractometer, Concentration, RefReading)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Refractometer, Concentration, RefReading)
data
Concentration <- c(rep("10%", 10), rep("20%", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Refractometer, Concentration, RefReading)
data
Trial <- rep(c(1:5),4)
Concentration <- c(rep("10%", 10), rep("20%", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Trial, Refractometer, Concentration, RefReading)
data
str(data)
mod <- aov(data, RefReading~Concentration + Refractometer)
mod <- aov(data = data, RefReading~Concentration + Refractometer)
summary(mod)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$20%$Concentration~splitDat$20%$Refractometer)
Trial <- rep(c(1:5),4)
Concentration <- c(rep("10", 10), rep("20", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Trial, Refractometer, Concentration, RefReading)
mod <- aov(data = data, RefReading~Concentration + Refractometer)
summary(mod)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$20$Concentration~splitDat$20$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer, data = splitDat$`20`)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer, data = splitDat$`20`)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$`20%`$Concentration~splitDat$`20%`$Refractometer)
Concentration <- c(rep("Ten", 10), rep("Twenty", 10))
Refractometer <- rep(c(rep("New", 5), rep("Old", 5)),2)
RefReading <- c(12.5,12.5,12.5,12.5,12.5,10,10,10,10,10,21,21,22,21,21,18,19,19,19,19)
data <- data.frame(Trial, Refractometer, Concentration, RefReading)
mod <- aov(data = data, RefReading~Concentration + Refractometer)
summary(mod)
splitDat <- split(data, data$Concentration)
mod <- aov(splitDat$Twenty$Concentration~splitDat$Twenty$Refractometer)
summary(mod)
summary(mod)
mod <- aov(splitDat$Twenty$RefReading~splitDat$Twenty$Refractometer)
summary(mod)
mod10 <- aov(splitDat$Ten$RefReading~splitDat$Ten$Refractometer)
summary(mod10)
splitDatConc <- split(data, data$Refractometer)
splitDatConc$New - splitDatConc$Old
splitDatConc$New$RefReading - splitDatConc$Old$RefReading
splitDatConc$New$RefReading
reading <- splitDatConc$New$RefReading - splitDatConc$Old$RefReading
conc <- c(rep("Ten",5), rep("Twenty",5))
df <- data.frame(conc, reading)
df
m <- aov(data=df, reading~conc)
summary(m)
mean(reading)
# required packages:
library(plyr)
library(dplyr)
install.packages(plyr)
install.packages("plyr")
# required packages:
library(plyr)
install.packages("ggplot2")
install.packages("dplyr")
install.packages("lme4")
install.packages("car")
install.packages("MASS")
install.packages("vegan")
install.packages("factoextra")
install.packages("knitr")
install.packages("knitr")
library(knitr)
# required packages:
library(plyr)
library(ggplot2)
library(dplyr)
library(lme4)
library(car)
library(MASS)
library(vegan)
library(factoextra)
x <- c(2,5,2,6,4,3,2)
y <- c("A","B", NA, NA,"A","B")
dat <- data.frame(x,y)
x <- c(2,2,6,4,3,2)
y <- c("A","B", NA, NA,"A","B")
dat <- data.frame(x,y)
dat
dat <- dat[is.na(dat$y),]
dat
dat <- data.frame(x,y)
dat <- dat[-is.na(dat$y),]
dat
dat <- data.frame(x,y)
dat <- dat[! is.na(dat$y),]
dat
install.packages("wesanderson")
wesanderson::wes_palette()
wes_palette
library(wesanderson)
wes_palettes
wes_palettes$Moonrise2
# Preliminaries:
ls()
rm(list=ls())
library(deSolve)
par(mfrow=c(1,1))
# initial state of system
state<-c(S=1, I1=0.05, I2=0.00, P=0.0)
# set parameters
parameters <- c(
beta=0.202,
alpha1=0.07,
alpha2=0.010,
gamma=0.05,
muA=0.011,
muB=0.025,
theta=0.01
)
#====================================================================================================
# create a function for this disease system using desolve
NosemaModel4 <- function(t, state, parameters){
with(as.list(c(state, parameters)), {
dSdt <- -(S * P * beta) - (S * muA)
dI1dt <- (S * P * beta) - (I1 * muA) - (I1 * gamma)
dI2dt <- (I1 * P * gamma) - (I2 * muB)
dPdt <- (I1 * alpha1) + (I2 * alpha2) - (P * theta)
return(list(c(dSdt,dI1dt,dI2dt,dPdt)))
})
}
# set up time steps
times <- seq(0,150,by=1)
# use ode() to to create an output
out <- ode(y=state,times=times, func=NosemaModel4, parms=parameters)
out<-as.data.frame(out)
out
# remove unwanted columns for this model
#out$time <- NULL
#out$S <- NULL
out$P <- NULL
out
matplot(x=times,y=out,
type="l",
xlab="Time (days)",
ylab="Rate of Nosema Infection",
main="Infection Rate through Time",
lwd=3,
ylim=c(0,1),
lty=1,
font.lab=2,
bty="l",
col=c("blue","red", "green"))
grid(col="gray")
legend(x=100,y=0.6,
legend=c("Infected",
"Critically Infected",
"Susceptable"),
pch=19,
col=c("blue","red", "green"),
bty="n",
bg="white")
out
plot(out$time, out$S)
plot(out$time, out$I1)
plot(out$time, out$I2)
#------------------------------------------------------------------------
# Preliminaries:
ls()
rm(list=ls())
library(deSolve)
par(mfrow=c(1,1))
# initial state of system
state<-c(S=1, I1=0.05, I2=0.00, P=0.0)
# set parameters
parameters <- c(
beta=0.202,
alpha1=0.07,
alpha2=0.010,
gamma=0.05,
muA=0.011,
muB=0.025,
theta=0.01
)
#====================================================================================================
# create a function for this disease system using desolve
NosemaModel4 <- function(t, state, parameters){
with(as.list(c(state, parameters)), {
dSdt <- -(S * P * beta) - (S * muA)
dI1dt <- (S * P * beta) - (I1 * muA) - (I1 * gamma)
dI2dt <- (I1 * P * gamma) - (I2 * muB)
dPdt <- (I1 * alpha1) + (I2 * alpha2) - (P * theta)
return(list(c(dSdt,dI1dt,dI2dt,dPdt)))
})
}
#====================================================================================================
# set up time steps
times <- seq(0,150,by=1)
# use ode() to to create an output
out <- ode(y=state,times=times, func=NosemaModel4, parms=parameters)
out<-as.data.frame(out)
# remove unwanted columns for this model
#out$time <- NULL
#out$S <- NULL
out$P <- NULL
# set survival equal to  1 - pooled infected (I1+I2)
#Surv <- 1 - (out[,1]+out[,2])
#out <- cbind(out,Surv)
#head(out,10)
#------------------------------------------------------------------------------------------
matplot(x=times,y=out,
type="l",
xlab="Time (days)",
ylab="Rate of Nosema Infection",
main="Infection Rate through Time",
lwd=3,
ylim=c(0,1),
lty=1,
font.lab=2,
bty="l",
col=c("blue","red", "green"))
grid(col="gray")
legend(x=100,y=0.6,
legend=c("Infected",
"Critically Infected",
"Susceptable"),
pch=19,
col=c("blue","red", "green"),
bty="n",
bg="white")
#####################################################################################################
# END MODEL MKIV
plot(out$time, out$S)
######################################################################################################
# Nosema Model MKV (5 May 2016) includes growth rates but no equation for colony as a reser
poisson.test(x = c(295, 11), T = c(173.5, 210.73), r=1, alternative = "two.sided", conf.level = 0.95)
#Preliminaries:
# Clear memory of characters
ls()
rm(list=ls())
# Call Required Packages
library("ggplot2")
library("dplyr")
library("plyr")
library("lme4")
library("car")
# Set Working Directory:
setwd("~/EvoRobotics/BurnhamProject")
data1 <- read.table("Robot3_Smooth/Robot3_Smooth.csv", sep = ",", stringsAsFactors = FALSE)
data1 <- read.table("Robot3_Smooth/Robot3_Smooth.csv", sep = ",", stringsAsFactors = FALSE, header=FALSE)
scan("Robot3_Smooth/Robot3_Smooth.csv", sep=',', what = "", quiet = TRUE)
dat <- scan("Robot3_Smooth/Robot3_Smooth.csv", sep=',', what = "", quiet = TRUE)
dat <- as.numeric(dat)
dat
data1 <- as.numeric(data1)
data1 <- scan("Robot3_Smooth/Robot3_Smooth.csv", sep=',', what = "", quiet = TRUE)
data1 <- as.numeric(data1)
# turn data set into a matrix of gen by n:
data1 <- as.vector(data1)
#names(data1) <- NULL
data1 <- as.numeric(data1)
mat <- matrix(data1, ncol=30)
mat <- matrix(data1, ncol=31)
mat <- matrix(data1, ncol=29)
200*30
200*31
199*31
199*32
199*33
199*34
199*35
# Set Working Directory:
setwd("~/EvoRobotics/BurnhamProject")
data1 <- scan("Robot3_Smooth/Robot3_Smooth.csv", sep=',', what = "", quiet = TRUE)
data1
data1 <- as.numeric(data1)
data1
data1 <- rm.na(data1)
data1 <- na.rm(data1)
data1 <- na.omit(data1)
data1
# turn data set into a matrix of gen by n:
data1 <- as.vector(data1)
data1
#names(data1) <- NULL
mat <- matrix(data1, ncol=30)
#names(data1) <- NULL
mat <- matrix(data1, ncol=31)
str(data1)
data1 <- scan("Robot3_Smooth/Robot3_Smooth.csv", sep=',', what = "", quiet = TRUE)
data1
data1 <- as.numeric(data1)
data1
data1 <- na.omit(data1)
data1
# turn data set into a matrix of gen by n:
data1 <- as.vector(data1)
data1
200*30
data1[1:838]
data1[!1:838]
data1 <- scan("Robot3_Smooth/Robot3_Smooth.csv", sep=',', what = "", quiet = TRUE)
data1 <- as.numeric(data1)
data1 <- na.omit(data1)
data1[!1:838]
data1[-c(1:838)]
dat <- data1[-c(1:838)]
dat
#names(data1) <- NULL
mat <- matrix(data1, ncol=30)
#names(data1) <- NULL
mat <- matrix(dat, ncol=30)
mat
mat[1,]
dat <- data1[-c(1:838)]
dat
#names(data1) <- NULL
mat <- matrix(dat, ncol=30)
mat
mat[,1]
data1 <- scan("Robot3_Smooth/Robot3_Smooth.csv", sep=',', what = "", quiet = TRUE)
data1 <- as.numeric(data1)
data1 <- na.omit(data1)
data1
# turn data set into a matrix of gen by n:
data1 <- as.vector(data1)
data1
last(data1)
1:199
len(1:199)
length(1:199)
mat[,30]
length(mat[,30])
data1 <- scan("Robot3_Smooth/Robot3_Smooth.csv", sep=',', what = "", quiet = TRUE)
data1 <- as.numeric(data1)
data1 <- na.omit(data1)
dat <- data1[-c(1:868)]
# turn data set into a matrix of gen by n:
data1 <- as.vector(data1)
#names(data1) <- NULL
mat <- matrix(dat, ncol=30)
length(mat[,30])
mat[,30]
length(mat[,29])
mat[,29]
data1 <- scan("Robot3_Smooth/Robot3_Smooth.csv", sep=',', what = "", quiet = TRUE)
data1 <- as.numeric(data1)
data1 <- na.omit(data1)
dat <- data1[-c(1:868)]
# turn data set into a matrix of gen by n:
data1 <- as.vector(data1)
data1 <- scan("Robot3_Smooth/Robot3_Smooth.csv", sep=',', what = "", quiet = TRUE)
data1 <- as.numeric(data1)
data1 <- na.omit(data1)
# turn data set into a matrix of gen by n:
data1 <- as.vector(data1)
data1
tail(data1, 400)
head(data1, 7000)
data1 <- scan("Robot3_SmoothTake2.csv", sep=',', what = "", quiet = TRUE)
data1
data1 <- scan("Robot3_SmoothTake2.csv", sep=',', what = "", quiet = TRUE)
data1 <- as.numeric(data1)
data1 <- na.omit(data1)
data1 <- scan("Robot3_SmoothTake2.csv", sep=',', what = "", quiet = TRUE)
data1
data1 <- as.numeric(data1)
data1
data1 <- na.omit(data1)
data1
# turn data set into a matrix of gen by n:
data1 <- as.vector(data1)
data1
length(data1)
99*3
295/3
data1 <- scan("Robot3_SmoothTake2.csv", sep=',', what = "", quiet = TRUE)
data1
length(data1)
297/3
# turn data set into a matrix of gen by n:
data1 <- as.vector(data1)
data1
length(data1)
#names(data1) <- NULL
mat <- matrix(dat, ncol=3)
matrix(data, nrow = rows, ncol = cols)
print(mat)
data1 <- scan("Robot3_SmoothTake2.csv", sep=',', what = "", quiet = TRUE)
# turn data set into a matrix of gen by n:
data1 <- as.vector(data1)
#names(data1) <- NULL
mat <- matrix(data1, ncol=3)
mat
mat <- as.numeric(mat)
mat
#names(data1) <- NULL
mat <- matrix(data1, ncol=3)
mat
# Set Working Directory:
setwd("~/EvoRobotics/BurnhamProject")
data1 <- scan("Robot3_SmoothTake2.csv", sep=',', what = "", quiet = TRUE)
# turn data set into a matrix of gen by n:
data1 <- as.vector(data1)
#names(data1) <- NULL
mat <- matrix(data1, ncol=3)
mat
mat <- as.numeric(mat)
mat
str(mat)
data1 <- scan("Robot3_SmoothTake2.csv", sep=',', what = "", quiet = TRUE)
data1 <- as.numeric(data1)
# turn data set into a matrix of gen by n:
data1 <- as.vector(data1)
#names(data1) <- NULL
mat <- matrix(data1, ncol=3)
print(mat)
data1 <- scan("Robot3_Smooth.csv", sep=',', what = "", quiet = TRUE)
data1 <- scan("Robot3_Smooth/Robot3_Smooth.csv", sep=',', what = "", quiet = TRUE)
data1
data1 <- as.numeric(data1)
# turn data set into a matrix of gen by n:
data1 <- as.vector(data1)
#names(data1) <- NULL
mat <- matrix(data1, ncol=30)
mat
mat[1,]
mat[,1]
199*30
# calculate row means to get vector to plot by
rowMeans(mat)
plot(1:199,rowMeans(mat))
mat[,199]
mat[199,]
max(mat[199,])
