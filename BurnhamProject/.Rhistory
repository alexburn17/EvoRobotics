# make char data numeric
data <- as.numeric(data)
# turn data set into a matrix of gen by n:
data <- as.vector(data)
# names(data1) <- NULL
mat <- matrix(data, ncol=30)
return(mat)
}
# run function on each file
mat1 <- fitnessCurv(data1)
mat2 <- fitnessCurv(data2)
mat3 <- fitnessCurv(data3)
mat4 <- fitnessCurv(data4)
mat5 <- fitnessCurv(data5)
mat6 <- fitnessCurv(data6)
mat7 <- fitnessCurv(data7)
mat8 <- fitnessCurv(data8)
mat1
mat2
mat3
mat4
mat5
mat6
mat7
mat8
# merge data
mat <- rbind(mat1, mat2, mat3, mat4, mat5, mat6, mat7, mat8)
# calculate row means to get vector to plot by
fitMeans <- rowMeans(mat)
mat3[199, ]
mat2[199, ]
mat1[199, ]
mat8[199, ]
Landscape <- c(rep("Smooth", 199), rep("Rough", 199), rep("Smooth", 199), rep("Rough", 199), rep("Smooth", 199), rep("Rough", 199), rep("Smooth", 199), rep("Rough", 199))
Lanscape
Landscape
Robot <- c(rep("Robot1", 199), rep("Robot1", 199), rep("Robot2", 199), rep("Robot2", 199), rep("Robot3", 199), rep("Robot3", 199), rep("Robot4", 199), rep("Robot4", 199))
rep(1:199, 8)
# create data frame:
DF <- data.frame(Generations, Landscape, Robot, fitMeans)
# create number of generations counter
Generations <- rep(1:199, 8)
# create data frame:
DF <- data.frame(Generations, Landscape, Robot, fitMeans)
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) +
theme_bw(base_size = 17) + theme(legend.position=c(.2, .8))
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) +
theme_bw(base_size = 17)
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) +
theme_bw(base_size = 17) + lab(x="Time(generations)")
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) +
theme_bw(base_size = 17) + labs(x="Time(generations)")
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) +
theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)")
mat1[,1]
max(mat1[,1])
which.max(mat1[,1])
which.max(mat1)
for (i in 1:30){
which.max(mat1[,i])
}
for (i in 1:30){
max1(i) <- which.max(mat1[,i])
}
for (i in 1:30){
max1[i] <- which.max(mat1[,i])
}
max1 <- numeric(0)
for (i in 1:30){
max1[i] <- which.max(mat1[,i])
}
max1
length(mat1)
dim(mat1)
dim(mat1)[2]
max1 <- numeric(length(dim(mat1)[2]))
max1
max1 <- numeric(0)
max1
vector(length(dim(mat1)[2]))
vector(dim(data)[2])
vector(dim(mat1)[2])
numeric(dim(mat1)[2])
# find max value in each column
maxFunc <- function(data=data){
# pre allocate vector for
max1 <- numeric(dim(data)[2])
for (i in 1:30){
max1[i] <- which.max(data[,i])
}
return(max1)
}
maxFunc(mat1)
maxFunc(mat2)
t <- c(maxFunc(mat1), maxFunc(mat2))
t
maxGens <- c(maxFunc(mat1), maxFunc(mat2), maxFunc(mat3), maxFunc(mat4), maxFunc(mat5), maxFunc(mat6), maxFunc(mat7), maxFunc(mat8))
maxGens
# create variable for terrain type
Landscape <- c(rep("Smooth", 30), rep("Rough", 30), rep("Smooth", 30), rep("Rough", 30), rep("Smooth", 30), rep("Rough", 30), rep("Smooth", 30), rep("Rough", 30))
# creat variable for robot type
Robot <- c(rep("Robot1", 30), rep("Robot1", 30), rep("Robot2", 30), rep("Robot2", 30), rep("Robot3", 30), rep("Robot3", 30), rep("Robot4", 30), rep("Robot4", 30))
# merge into a dataframe:
genData <- data.frame(Landscape, Robot, maxGens)
genData
#ddply summarize:
Temp <- ddply(genData, c("Robot", "Landscape"), summarise,
n = length(maxGens),
mean = mean(maxGens, na.rm=TRUE),
sd = sd(maxGens, na.rm=TRUE),
se = sd / sqrt(n))
Temp
#creating the figure
plot1 <- ggplot(Temp, aes(x=Robot, y=mean, fill=Landscape)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="Pathogen Richness", x="Sampling Event") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 17) + scale_fill_manual(values=colors) + theme(legend.position="none") + coord_cartesian(ylim = c(0, 6))
plot1 + theme_bw(base_size = 17) + theme(legend.position="none") + coord_cartesian(ylim = c(0, 6))
plot1 + theme_bw(base_size = 17) + theme(legend.position="none") + coord_cartesian(ylim = c(0, 200))
#choosing color pallet
colors <- c("steelblue", "blue", "steelblue")
#creating the figure
plot1 <- ggplot(Temp, aes(x=Robot, y=mean, fill=Landscape)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="Gens to Max Fitness", x="Robot Type") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 17) + theme(legend.position="none") + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 200))
#choosing color pallet
colors <- c("steelblue", "grey")
#creating the figure
plot1 <- ggplot(Temp, aes(x=Robot, y=mean, fill=Landscape)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="Gens to Max Fitness", x="Robot Type") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 17) + theme(legend.position="none") + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 200))
#choosing color pallet
colors <- c("blue", "grey")
#creating the figure
plot1 <- ggplot(Temp, aes(x=Robot, y=mean, fill=Landscape)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) + labs(y="Gens to Max Fitness", x="Robot Type") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_bw(base_size = 17) + theme(legend.position="none") + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 200))
fit <- aov(data = genData, maxGens ~ Robot*Landscape)
summary(fit)
#creating the figure of max gens:
plot1 <- ggplot(Temp, aes(x=Robot, y=mean, fill=Landscape)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(y="Gens to Max Fitness", x="Robot Type") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + theme(legend.position="none") + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 200))
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.8, .8)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 200))
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 200))
# find max value in each column
maxFuncFit <- function(data=data){
# pre allocate vector for
max1 <- numeric(dim(data)[2])
for (i in 1:30){
max1[i] <- max(data[,i])
}
return(max1)
}
# find max fitness for each of 8 treatments:
maxFit <- c(maxFuncFit(mat1), maxFuncFit(mat2), maxFuncFit(mat3), maxFuncFit(mat4), maxFuncFit(mat5),maxFuncFit(mat6), maxFuncFit(mat7), maxFuncFit(mat8))
maxFit
# merge into a dataframe:
genData <- data.frame(Landscape, Robot, maxGens, maxFit)
#ddply summarize:
Temp1 <- ddply(genData, c("Robot", "Landscape"), summarise,
n = length(maxFit),
mean = mean(maxFit, na.rm=TRUE),
sd = sd(maxFit, na.rm=TRUE),
se = sd / sqrt(n))
Temp1
#choosing color pallet
colors <- c("blue", "grey")
#creating the figure of max gens:
plot1 <- ggplot(Temp1, aes(x=Robot, y=mean, fill=Landscape)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(y="Max Fitness", x="Robot Type") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 1))
#creating the figure of max gens:
plot1 <- ggplot(Temp1, aes(x=Robot, y=mean, fill=Landscape)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(y="Max Fitness", x="Robot Type") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.5))
# analysis of max gens
fit1 <- aov(data = genData, maxFit ~ Robot*Landscape)
summary(fit1)
# analysis of max gens
fit1 <- aov(data = genData, maxFit ~ Robot)
summary(fit1)
# analysis of max gens
fit1 <- aov(data = genData, maxFit ~ Landscape)
summary(fit1)
30*8
# model of loBQCV by varroa load using a gamma distribution:
Full <- lmer(data = genData, formula = maxFit ~ Landscape * Robot + (1|1:240))
ID <- c(1:240)
ID
# merge into a dataframe:
genData <- data.frame(Landscape, Robot, maxGens, maxFit, ID)
# model of loBQCV by varroa load using a gamma distribution:
Full <- lmer(data = genData, formula = maxFit ~ Landscape * Robot + (1|ID))
genData
hist(genData$maxFit)
max(genData$maxFit)
# model of loBQCV by varroa load using a gamma distribution:
Full <- lmer(data = genData, formula = maxFit ~ Landscape * Robot + (1|Robot))
summary(Full)
Anova(Full)
# analysis of max gens
fit1 <- aov(data = genData, maxFit ~ Landscape + Robot)
summary(fit1)
# analysis of max gens
fit1 <- aov(data = genData, maxFit ~ Landscape + Robot)
summary(fit1)
max(genData)
max(genData$maxFit)
max(genData$maxFit, 2)
max(genData$maxFit, 3)
genData$maxFit
which.max(genData$maxFit)
View(genData)
View(genData)
kruskal.test(data = genData, maxFit ~ Landscape + Robot)
kruskal.test(data = genData, maxFit ~ Landscape)
kruskal.test(data = genData, maxFit ~ Robot)
kruskal.test(data = genData, maxFit ~ c(Robot, Landscape))
kruskal.test(data = genData, maxGens ~ Robot)
kruskal.test(data = genData, maxFit ~ Robot)
dat <- scan("Random.csv", sep=',', what = "", quiet = TRUE)
which.max(genData$maxFit)adfsd
DAT
dat
length(dat)
length(dat)/30
as.numeric(dat)
randomDat <- scan("Random.csv", sep=',', what = "", quiet = TRUE)
Landscape <- c(Landscape, Landscape)
Landscape
# merge into a dataframe:
genData <- data.frame(RunType, Landscape, Robot, maxGens, maxFit)
RunType <- c(rep("Evolutionary Algorithm", 240), rep("Random Controller", 240))
# merge into a dataframe:
genData <- data.frame(RunType, Landscape, Robot, maxGens, maxFit)
genData
genData$maxFit
genData$maxGens
# find max number of gens for each of 8 treatments:
maxGens <- c(maxFunc(mat1), maxFunc(mat2), maxFunc(mat3), maxFunc(mat4), maxFunc(mat5), maxFunc(mat6), maxFunc(mat7), maxFunc(mat8))
# find max fitness for each of 8 treatments:
maxFit <- c(maxFuncFit(mat1), maxFuncFit(mat2), maxFuncFit(mat3), maxFuncFit(mat4), maxFuncFit(mat5),maxFuncFit(mat6), maxFuncFit(mat7), maxFuncFit(mat8), rep(NA, 240))
# create variable for terrain type
Landscape <- c(rep("Smooth", 30), rep("Rough", 30), rep("Smooth", 30), rep("Rough", 30), rep("Smooth", 30), rep("Rough", 30), rep("Smooth", 30), rep("Rough", 30))
Landscape <- c(Landscape, Landscape)
# creat variable for robot type
Robot <- c(rep("Robot1", 30), rep("Robot1", 30), rep("Robot2", 30), rep("Robot2", 30), rep("Robot3", 30), rep("Robot3", 30), rep("Robot4", 30), rep("Robot4", 30))
Robot <- c(Robot, Robot)
RunType <- c(rep("Evolutionary Algorithm", 240), rep("Random Controller", 240))
# merge into a dataframe:
genData <- data.frame(RunType, Landscape, Robot, maxGens, maxFit)
genData$maxGens
rep(NA, 240)
# find max fitness for each of 8 treatments:
maxFit <- c(maxFuncFit(mat1), maxFuncFit(mat2), maxFuncFit(mat3), maxFuncFit(mat4), maxFuncFit(mat5),maxFuncFit(mat6), maxFuncFit(mat7), maxFuncFit(mat8), rep(NA, 240))
macFit
maxFit
# find max number of gens for each of 8 treatments:
maxGens <- c(maxFunc(mat1), maxFunc(mat2), maxFunc(mat3), maxFunc(mat4), maxFunc(mat5), maxFunc(mat6), maxFunc(mat7), maxFunc(mat8), rep(NA, 240))
# find max fitness for each of 8 treatments:
maxFit <- c(maxFuncFit(mat1), maxFuncFit(mat2), maxFuncFit(mat3), maxFuncFit(mat4), maxFuncFit(mat5),maxFuncFit(mat6), maxFuncFit(mat7), maxFuncFit(mat8), randomDat)
# create variable for terrain type
Landscape <- c(rep("Smooth", 30), rep("Rough", 30), rep("Smooth", 30), rep("Rough", 30), rep("Smooth", 30), rep("Rough", 30), rep("Smooth", 30), rep("Rough", 30))
Landscape <- c(Landscape, Landscape)
# creat variable for robot type
Robot <- c(rep("Robot1", 30), rep("Robot1", 30), rep("Robot2", 30), rep("Robot2", 30), rep("Robot3", 30), rep("Robot3", 30), rep("Robot4", 30), rep("Robot4", 30))
Robot <- c(Robot, Robot)
RunType <- c(rep("Evolutionary Algorithm", 240), rep("Random Controller", 240))
# merge into a dataframe:
genData <- data.frame(RunType, Landscape, Robot, maxGens, maxFit)
genData$maxGens
genData$maxFit
str(genData)
# merge into a dataframe:
genData <- data.frame(RunType, Landscape, Robot, maxGens, as.numeric(maxFit))
str(genData)
genData$as.numeric.maxFit.
maxFit <- as.numeric(maxFit)
# merge into a dataframe:
genData <- data.frame(RunType, Landscape, Robot, maxGens, maxFit)
# find max number of gens for each of 8 treatments:
maxGens <- c(maxFunc(mat1), maxFunc(mat2), maxFunc(mat3), maxFunc(mat4), maxFunc(mat5), maxFunc(mat6), maxFunc(mat7), maxFunc(mat8), rep(NA, 240))
# find max fitness for each of 8 treatments:
maxFit <- c(maxFuncFit(mat1), maxFuncFit(mat2), maxFuncFit(mat3), maxFuncFit(mat4), maxFuncFit(mat5),maxFuncFit(mat6), maxFuncFit(mat7), maxFuncFit(mat8), randomDat)
maxFit <- as.numeric(maxFit)
# create variable for terrain type
Landscape <- c(rep("Smooth", 30), rep("Rough", 30), rep("Smooth", 30), rep("Rough", 30), rep("Smooth", 30), rep("Rough", 30), rep("Smooth", 30), rep("Rough", 30))
Landscape <- c(Landscape, Landscape)
# creat variable for robot type
Robot <- c(rep("Robot1", 30), rep("Robot1", 30), rep("Robot2", 30), rep("Robot2", 30), rep("Robot3", 30), rep("Robot3", 30), rep("Robot4", 30), rep("Robot4", 30))
Robot <- c(Robot, Robot)
RunType <- c(rep("Evolutionary Algorithm", 240), rep("Random Controller", 240))
# merge into a dataframe:
genData <- data.frame(RunType, Landscape, Robot, maxGens, maxFit)
#ddply summarize:
Temp <- ddply(genData, c("Robot", "Landscape"), summarise,
n = length(maxGens),
mean = mean(maxGens, na.rm=TRUE),
sd = sd(maxGens, na.rm=TRUE),
se = sd / sqrt(n))
Temp
genDataSplit <- genData[genData$RunType=="Evolutionary Algorithm", ]
genDataSplit
#ddply summarize:
Temp <- ddply(genDataSplit, c("Robot", "Landscape"), summarise,
n = length(maxGens),
mean = mean(maxGens, na.rm=TRUE),
sd = sd(maxGens, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("blue", "grey")
#creating the figure of max gens:
plot1 <- ggplot(Temp, aes(x=Robot, y=mean, fill=Landscape)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(y="Gens to Max Fitness", x="Robot Type") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 200))
#ddply summarize:
Temp1 <- ddply(genData, c("Robot", "Landscape", "RunType"), summarise,
n = length(maxFit),
mean = mean(maxFit, na.rm=TRUE),
sd = sd(maxFit, na.rm=TRUE),
se = sd / sqrt(n))
Temp1
#choosing color pallet
colors <- c("blue", "grey")
#creating the figure of max gens:
plot1 <- ggplot(Temp1, aes(x=Robot, y=mean, fill=Landscape)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(y="Max Fitness", x="Robot Type") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.5))
#creating the figure of max gens:
plot1 <- ggplot(Temp1, aes(x=Robot, y=mean, fill=Landscape)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(y="Max Fitness", x="Robot Type") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4))
# analysis of max gens
fit1 <- aov(data = genData, maxFit ~ Landscape + Robot)
#ddply summarize:
Temp1 <- ddply(genDataSplit, c("Robot", "Landscape", "RunType"), summarise,
n = length(maxFit),
mean = mean(maxFit, na.rm=TRUE),
sd = sd(maxFit, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("blue", "grey")
#creating the figure of max gens:
plot1 <- ggplot(Temp1, aes(x=Robot, y=mean, fill=Landscape)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(y="Max Fitness", x="Robot Type") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4))
# analysis of max gens
fit1 <- aov(data = genData, maxFit ~ Landscape + Robot)
genDataRandom <- genData[!genData$RunType=="Evolutionary Algorithm", ]
mean(genDataRandom$maxFit)
sd(genDataRandom$maxFit)
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = mean(genDataRandom$maxFit), xend = 0, y = mean(genDataRandom$maxFit), yend = 4, colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 2.5, xend = 0, y = 15, yend = 4, colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = .4, xend = 0, y = .4, yend = 4, colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = .2, xend = 0, y = .4, yend = 4, colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 0, xend = 0, y = .4, yend = 4, colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 0, xend = 0, y = .4, yend = .1, colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 0, xend = mean(genDataRandom$maxFit), y = 1 ., yend = mean(genDataRandom$maxFit), colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 0, xend = mean(genDataRandom$maxFit), y = 1 , yend = mean(genDataRandom$maxFit), colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 10, xend = mean(genDataRandom$maxFit), y = 1 , yend = mean(genDataRandom$maxFit), colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = mean(genDataRandom$maxFit), xend = mean(genDataRandom$maxFit), y = 1 , yend = mean(genDataRandom$maxFit), colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 4, xend = mean(genDataRandom$maxFit), y = 1 , yend = mean(genDataRandom$maxFit), colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 4, xend = mean(genDataRandom$maxFit), y = mean(genDataRandom$maxFit) , yend = mean(genDataRandom$maxFit), colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 5, xend = mean(genDataRandom$maxFit), y = mean(genDataRandom$maxFit) , yend = mean(genDataRandom$maxFit), colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 5, xend = mean(genDataRandom$maxFit), y = 0 , yend = mean(genDataRandom$maxFit), colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 5, xend = mean(genDataRandom$maxFit), y = mean(genDataRandom$maxFit) , yend = 0, colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 5, xend = 0, y = mean(genDataRandom$maxFit) , yend = mean(genDataRandom$maxFit), colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 0, xend = 5, y = mean(genDataRandom$maxFit) , yend = mean(genDataRandom$maxFit), colour = "red")
plot1 + theme_minimxal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 1, xend = 4, y = mean(genDataRandom$maxFit) , yend = mean(genDataRandom$maxFit), colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 1, xend = 4, y = mean(genDataRandom$maxFit) , yend = mean(genDataRandom$maxFit), colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 0.5, xend = 4.5, y = mean(genDataRandom$maxFit) , yend = mean(genDataRandom$maxFit), colour = "red")
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 0.5, xend = 4.5, y = mean(genDataRandom$maxFit) , yend = mean(genDataRandom$maxFit), colour = "red", size=2)
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 0.5, xend = 4.5, y = mean(genDataRandom$maxFit) , yend = mean(genDataRandom$maxFit), colour = "red", size=1.5)
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 0.5, xend = 4.5, y = mean(genDataRandom$maxFit) , yend = mean(genDataRandom$maxFit), colour = "red", size=1)
glmer(data=genDataSplit, maxFit ~ Robot * Landscape + (1|Robot))
glmer(data=genDataSplit, maxFit ~ Robot * Landscape + (1|Robot), family = gamma)
glmer(data=genDataSplit, maxFit ~ Robot * Landscape + (1|Robot), family = Gamma)
mod <- glmer(data=genDataSplit, maxFit ~ Robot * Landscape + (1|Robot), family = Gamma)
summary(mod)
mod <- glmer(data=genDataSplit, maxFit ~ Robot * Landscape + (1|Landscape), family = Gamma)
summary(mod)
mod <- glmer(data=genDataSplit, maxFit ~ Robot * Landscape + (1|1:240), family = Gamma)
ID <- c(1:240)
# merge into a dataframe:
genData <- data.frame(RunType, Landscape, Robot, maxGens, maxFit, ID)
genDataSplit <- genData[genData$RunType=="Evolutionary Algorithm", ]
mod <- glmer(data=genDataSplit, maxFit ~ Robot * Landscape + (1|), family = Gamma)
mod <- glmer(data=genDataSplit, maxFit ~ Robot * Landscape + (1|ID), family = Gamma)
mod <- glmer(data=genDataSplit, maxFit ~ Robot * Landscape + (1|Robot), family = Gamma)
summary(mod)
mod1 <- glmer(data=genDataSplit, maxGens ~ Robot * Landscape + (1|Robot), family = Gamma)
summary(mod1)
genDataSplit <- genData[genData$RunType=="Evolutionary Algorithm", ]
#ddply summarize:
Temp <- ddply(genDataSplit, c("Robot", "Landscape"), summarise,
n = length(maxGens),
mean = mean(maxGens, na.rm=TRUE),
sd = sd(maxGens, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("blue", "grey")
#creating the figure of max gens:
plot1 <- ggplot(Temp, aes(x=Robot, y=mean, fill=Landscape)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(y="Gens to Max Fitness", x="Robot Type") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 200))
# calculate mean of random runs:
genDataRandom <- genData[!genData$RunType=="Evolutionary Algorithm", ]
mean(genDataRandom$maxFit)
#ddply summarize:
Temp1 <- ddply(genDataSplit, c("Robot", "Landscape", "RunType"), summarise,
n = length(maxFit),
mean = mean(maxFit, na.rm=TRUE),
sd = sd(maxFit, na.rm=TRUE),
se = sd / sqrt(n))
#choosing color pallet
colors <- c("blue", "grey")
#creating the figure of max gens:
plot1 <- ggplot(Temp1, aes(x=Robot, y=mean, fill=Landscape)) +
geom_bar(stat="identity",
position=position_dodge()) + labs(y="Max Fitness", x="Robot Type") + geom_errorbar(aes(ymin = mean - se, ymax = mean + se, width = 0.2),position=position_dodge(.9))
plot1 + theme_minimal(base_size = 17) + theme(legend.position=c(.9, .9)) + scale_fill_manual(values=colors) + coord_cartesian(ylim = c(0, 0.4)) + annotate("segment", x = 0.5, xend = 4.5, y = mean(genDataRandom$maxFit) , yend = mean(genDataRandom$maxFit), colour = "red", size=1)
# Fitness plot
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) +
theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)")
# Fitness plot
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) +
theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)") + scale_color_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H")) + scale_linetype_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H")) +
####################################################################
# Function: maxFunc
# Takes data from each evolutionary run of 30 from pyrosim
# and find the gen number when fitness first is max
# INPUT: data = matrix of gen by N
# OUTPUT: vetor of generation numbers
####################################################################
# find max value in each column
maxFunc <- function(data=data){
# pre allocate vector for
max1 <- numeric(dim(data)[2])
for (i in 1:30){
max1[i] <- which.max(data[,i])
}
return(max1)
}
# Fitness plot
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) + theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)") + scale_color_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H")) + scale_linetype_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H")) +
####################################################################
# Function: maxFunc
# Takes data from each evolutionary run of 30 from pyrosim
# and find the gen number when fitness first is max
# INPUT: data = matrix of gen by N
# OUTPUT: vetor of generation numbers
####################################################################
# find max value in each column
maxFunc <- function(data=data){
# pre allocate vector for
max1 <- numeric(dim(data)[2])
for (i in 1:30){
max1[i] <- which.max(data[,i])
}
return(max1)
}
# Fitness plot
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) + theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)") + scale_color_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H")) + scale_linetype_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H"))
# Fitness plot
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) + theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)") + scale_color_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H"), values = c("red", "red", "blue", "blue", "green", "green", "purple", "purple")) + scale_linetype_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H"), values = c(1,2,1,2,1,2,1,2))
# Fitness plot
p <- ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) + theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)") + scale_color_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H"), values = c("red", "red", "blue", "blue", "green", "green", "purple", "purple"))
p + scale_linetype_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H"), values = c(1,2,1,2,1,2,1,2))
# Fitness plot
p <- ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) + theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)") + scale_color_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H"), values = c("red", "blue", "green", "purple"))
p + scale_linetype_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H"), values = c(1,2,1,2,1,2,1,2))
# Fitness plot
p <- ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) + theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)") + scale_color_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H"), values = c("red", "blue", "green", "purple"))
p + scale_linetype_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H"), values = c(1,2))
# Fitness plot
p <- ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) + theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)") + scale_color_manual(name = "Robot and Environment",labels = c("A", "B", "C", "D", "E", "F", "G", "H"), values = c("red", "blue", "green", "purple"))
p
# Fitness plot
p <- ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) + theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)") + scale_color_discrete("") +
scale_linetype_manual("", values=c(1,2,1,2,1,2,1,2))
p
# Fitness plot
p <- ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) + theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)")
# Fitness plot
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) + theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)")
str(DF)
DF$Landscape <- factor(DF$Landscape, levels = c("Smooth", "Rough"))
# Fitness plot
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) + theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)")
# Fitness plot
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) + theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)") + theme(legend.key.width = unit(10, "line"))
# Fitness plot
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) + theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)") + theme(legend.key.width = unit(3, "line"))
# Fitness plot
ggplot(DF, aes(x=Generations, y=fitMeans, color=Robot, linetype =Landscape)) + geom_line(size = 2) + theme_bw(base_size = 17) + labs(x="Time (generations)", y="Fitness (light intensity)") + theme(legend.key.width = unit(2.5, "line"))
View(genDataSplit)
View(genDataSplit)
getRversion()
hist(genDataSplit$maxGens)
hist(log(genDataSplit$maxGens))
